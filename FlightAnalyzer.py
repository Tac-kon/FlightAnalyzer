# -*- coding: utf-8 -*-

import numpy as np
import pandas as pd
import matplotlib as mpl
import matplotlib.pyplot as plt

def height_baro(d,r): 
    print("sealevel_pressure: ")
    slp=float(input())
    d['height'] = (pow((slp / d['baro']),(1.0 / 5.257)) - 1.0) * (d['temp'] + 273) / 0.0065 
    print('max_height=')
    print(max(d['height']))
    plt.figure(1)    
    plt.clf()
    plt.plot(d['time'],d['height'],'r.', markersize=7, label='height-time_by_baro')
    plt.xlim([0,r])
    plt.ylim([0,1200])
    plt.xlabel('time[s]')
    plt.ylabel('height[m]')
    plt.title('height-time_by_baro')
    plt.legend(loc='best')

def accel(d,r):
    d['acc_abs'] = pow((pow(d['acc_x'],2) + pow(d['acc_y'],2) + pow(d['acc_z'],2)),0.5)
    plt.figure(2)
    plt.clf()
    plt.subplot(2,2,1)
    plt.plot(d['time'],d['acc_x'],'r.',markersize = 7, label = 'accel_x')
    plt.xlim([0,r])
    plt.xlabel('time[s]')
    plt.ylabel('accel_x[G]')
    plt.title('accel_x')
    plt.legend(loc = 'best')
    plt.subplot(2,2,2)
    plt.plot(d['time'],d['acc_y'],'b.',markersize = 7, label = 'accel_y')
    plt.xlim([0,r])
    plt.xlabel('time[s]')
    plt.ylabel('accel_y[G]')
    plt.title('accel_y')
    plt.legend(loc = 'best')
    plt.subplot(2,2,3)
    plt.plot(d['time'],d['acc_z'],'g.',markersize = 7, label = 'accel_z')
    plt.xlim([0,r])
    plt.xlabel('time[s]')
    plt.ylabel('accel_z[G]')
    plt.title('accel_z')
    plt.legend(loc = 'best')
    plt.subplot(2,2,4)
    plt.plot(d['time'],d['acc_abs'],'c.',markersize = 7, label = 'accel_abs')
    plt.xlim([0,r])
    plt.xlabel('time[s]')
    plt.ylabel('accel_abs[G]')
    plt.title('accel_abs')
    plt.legend(loc = 'best')

def gyro(d,r):
    d['gyro_x']=d['gyro_x']/1000
    d['gyro_y']=d['gyro_y']/1000
    d['gyro_z']=d['gyro_z']/1000
    d['gyro_abs'] = pow((pow(d['gyro_x'],2) + pow(d['gyro_y'],2) + pow(d['gyro_z'],2)),0.5)
    plt.figure(3)
    plt.clf()
    plt.subplot(2,2,1)
    plt.plot(d['time'],d['gyro_x'],'r.',markersize = 7, label = 'gyro_x')
    plt.xlim([0,r])
    plt.xlabel('time[s]')
    plt.ylabel('gyro_x[rad/s]')
    plt.title('gyro_x')
    plt.legend(loc = 'best')
    plt.subplot(2,2,2)
    plt.plot(d['time'],d['gyro_y'],'b.',markersize = 7, label = 'gyro_y')
    plt.xlim([0,r])
    plt.xlabel('time[s]')
    plt.ylabel('gyro_y[rad/s]')
    plt.title('gyro_y')
    plt.legend(loc = 'best')
    plt.subplot(2,2,3)
    plt.plot(d['time'],d['gyro_z'],'g.',markersize = 7, label = 'gyro_z')
    plt.xlim([0,r])
    plt.xlabel('time[s]')
    plt.ylabel('gyro_z[rad/s]')
    plt.title('gyro_z')
    plt.legend(loc = 'best')
    plt.subplot(2,2,4)
    plt.plot(d['time'],d['gyro_abs'],'c.',markersize = 7, label = 'gyro_abs')
    plt.xlim([0,r])
    plt.xlabel('time[s]')
    plt.ylabel('gyro_abs[rad/s]')
    plt.title('gyro_abs')
    plt.legend(loc = 'best')

def mag(d,r):
    d['mag_abs'] = pow((pow(d['mag_x'],2) + pow(d['mag_y'],2) + pow(d['mag_z'],2)),0.5)
    plt.figure(4)
    plt.clf()
    plt.subplot(2,2,1)
    plt.plot(d['time'],d['mag_x'],'r.',markersize = 7, label = 'mag_x')
    plt.xlim([0,r])
    plt.xlabel('time[s]')
    plt.ylabel('mag_x[G]')
    plt.title('mag_x')
    plt.legend(loc = 'best')
    plt.subplot(2,2,2)
    plt.plot(d['time'],d['mag_y'],'b.',markersize = 7, label = 'mag_y')
    plt.xlim([0,r])
    plt.xlabel('time[s]')
    plt.ylabel('mag_y[G]')
    plt.title('mag_y')
    plt.legend(loc = 'best')
    plt.subplot(2,2,3)
    plt.plot(d['time'],d['mag_z'],'g.',markersize = 7, label = 'mag_z')
    plt.xlim([0,r])
    plt.xlabel('time[s]')
    plt.ylabel('mag_z[G]')
    plt.title('mag_z')
    plt.legend(loc = 'best')
    plt.subplot(2,2,4)
    plt.plot(d['time'],d['mag_abs'],'c.',markersize = 7, label = 'mag_abs')
    plt.xlim([0,r])
    plt.xlabel('time[s]')
    plt.ylabel('mag_abs[G]')
    plt.title('mag_abs')
    plt.legend(loc = 'best')

def gps(d,r):
    plt.figure(5)
    plt.clf()
    plt.subplot(2,2,1)
    plt.plot(d['time'],d['latitude'],'r.',markersize=7, label = 'latitude')
    plt.xlim([0,r])
    plt.ylim([40,40.5])
    plt.xlabel('time [s]')
    plt.ylabel('latitude')
    plt.title('latitude')
    plt.legend(loc = 'best')
    plt.subplot(2,2,2)
    plt.plot(d['time'],d['longtitude'],'b.',markersize=7, label = 'longtitude')
    plt.xlim([0,r])
    plt.ylim([139.5,140.5])
    plt.xlabel('time [s]')
    plt.ylabel('longtitude')
    plt.title('longtitude')
    plt.legend(loc = 'best')
    plt.subplot(2,2,3)
    plt.plot(d['latitude'],d['longtitude'],'g.',markersize=7, label = 'gps_data')
    plt.xlim([40,40.5])
    plt.ylim([139.5,140.5])
    plt.xlabel('latitude')
    plt.ylabel('longtitude')
    plt.title('gps_data')
    plt.legend(loc = 'best')

def heading(d,r):
    d['roll']=np.arctan2(d['acc_y'],d['acc_z'])
    d['pitch']=np.arctan(-d['acc_x']/ (d['acc_y']*np.sin(d['roll'])+d['acc_z']*np.cos(d['roll'])))
    d['yaw']=np.arctan2((d['mag_z']*np.sin(d['roll'])-d['mag_y']*np.cos(d['roll'])), (d['mag_x']*np.cos(d['pitch'])+d['mag_y']*np.sin(d['pitch'])*np.sin(d['roll'])+d['mag_z']*np.sin(d['pitch'])*np.cos(d['roll'])))
    d['roll']=d['roll']*180/3.141
    d['pitch']=d['pitch']*180/3.141
    d['yaw']=d['yaw']*180/3.141
    plt.figure(6)
    plt.clf()
    plt.subplot(2,2,1)
    plt.plot(d['time'],d['roll'],'r.',markersize=7, label = 'roll')
    plt.xlim([0,r])
    plt.xlabel('time [s]')
    plt.ylabel('roll')
    plt.title('roll')
    plt.legend(loc = 'best')
    plt.subplot(2,2,2)
    plt.plot(d['time'],d['pitch'],'b.',markersize=7, label = 'pitch')
    plt.xlim([0,r])
    plt.xlabel('time [s]')
    plt.ylabel('pitch')
    plt.title('pitch')
    plt.legend(loc = 'best')
    plt.subplot(2,2,3)
    plt.plot(d['time'],d['yaw'],'g.',markersize=7, label = 'yaw')
    plt.xlim([0,r])
    plt.xlabel('time [s]')
    plt.ylabel('yaw')
    plt.title('yaw')
    plt.legend(loc = 'best')

if __name__ == '__main__': 
    data=pd.read_csv('flightdata.csv',names=['time','temp','baro','acc_x','acc_y','acc_z','gyro_x','gyro_y','gyro_z','mag_x','mag_y','mag_z','latitude','longtitude'])
    #print('Start Time:')
    #t_0=float(input())
    t_0=13776966
    #print('End Time')
    #t_1=float(input())
    t_1=13812045
    #data['time'] = (data['time'] - min(data['time']))/ 1000
    data['time'] = (data['time'] - t_0)/ 1000
    t_range=(t_1-t_0)/1000
    height_baro(data,t_range)
    accel(data,t_range)
    gyro(data,t_range)
    mag(data,t_range)
    gps(data,t_range)
    heading(data,t_range)
    data.to_csv('datalog.csv')
    plt.show()